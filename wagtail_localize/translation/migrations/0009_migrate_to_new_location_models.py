# Generated by Django 2.2.9 on 2019-12-18 14:36

from django.db import migrations


def migrate_to_new_location_models(apps, schema_editor):
    TranslatableObject = apps.get_model(
        "wagtail_localize_translation_memory.TranslatableObject"
    )
    TranslatableRevision = apps.get_model(
        "wagtail_localize_translation_memory.TranslatableRevision"
    )
    SegmentPageLocation = apps.get_model(
        "wagtail_localize_translation_memory.SegmentPageLocation"
    )
    SegmentLocation = apps.get_model(
        "wagtail_localize_translation_memory.SegmentLocation"
    )
    TemplatePageLocation = apps.get_model(
        "wagtail_localize_translation_memory.TemplatePageLocation"
    )
    TemplateLocation = apps.get_model(
        "wagtail_localize_translation_memory.TemplateLocation"
    )
    ContentType = apps.get_model("contenttypes.ContentType")

    def get_revision_from_page_revision(page_revision):
        try:
            return TranslatableRevision.objects.get(page_revision=page_revision)
        except TranslatableRevision.DoesNotExist:
            page = page_revision.page
            page_model = apps.get_model(
                page.content_type.app_label, page.content_type.model
            )
            page_translation_model = page_model._meta.get_field("locale").model
            page_specific = page_model.objects.get(id=page.id)

            object, created = TranslatableObject.objects.get_or_create(
                translation_key=page_specific.translation_key,
                content_type=ContentType.objects.get_for_model(page_translation_model),
            )

            return TranslatableRevision.objects.create(
                object=object,
                locale=page_specific.locale,
                content_json=page_revision.content_json,
                created_at=page_revision.created_at,
                page_revision=page_revision,
            )

    for segment_page_location in SegmentPageLocation.objects.select_related(
        "page_revision"
    ).iterator():
        revision = get_revision_from_page_revision(segment_page_location.page_revision)
        SegmentLocation.objects.create(
            revision=revision,
            path=segment_page_location.path,
            order=segment_page_location.order,
            segment_id=segment_page_location.segment_id,
        )

    for template_page_location in TemplatePageLocation.objects.select_related(
        "page_revision"
    ).iterator():
        revision = get_revision_from_page_revision(template_page_location.page_revision)
        TemplateLocation.objects.create(
            revision=revision,
            path=template_page_location.path,
            order=template_page_location.order,
            template_id=template_page_location.template_id,
        )


class Migration(migrations.Migration):

    dependencies = [
        ("wagtail_localize_translation_memory", "0008_new_location_models"),
    ]

    operations = [
        migrations.RunPython(migrate_to_new_location_models),
    ]
