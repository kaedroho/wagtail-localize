[tox]
min_version = 4.0

envlist =
    python3.10-django3.2-wagtail5.2-postgres15
    python{3.8,3.9,3.10,3.11,3.12}-django{4.2}-wagtail{5.2,6.0}-postgres15
    python{3.10,3.11,3.12}-django{5.0}-wagtail{5.2,6.0}-postgres15
    # note: we're running a subset of the test with sqlite
    python3.10-django3.2-wagtail5.2-sqlite
    python3.11-django4.2-wagtail{5.2,6.0}-sqlite
    python3.12-django5.0-wagtail{5.2,6.0}-sqlite

[gh-actions]
python =
    3.8: python3.8
    3.9: python3.9
    3.10: python3.10
    3.11: python3.11
    3.12: python3.12

[gh-actions:env]
DATABASE =
    postgres: postgres
    sqlite: sqlite

[testenv]
package = editable
pass_env =
    FORCE_COLOR
    NO_COLOR

use_frozen_constraints = true
constrain_package_deps = true

setenv =
    postgres: DATABASE_URL={env:DATABASE_URL:postgres:///wagtail_localize}
    PYTHONDEVMODE = 1

extras = testing

deps =
    django3.2: Django>=3.2,<3.3
    django4.2: Django>=4.2,<5.0
    django5.0: Django>=5.0,<5.1

    wagtail5.2: wagtail>=5.2.2,<5.3
    wagtail6.0: wagtail>=6.0,<6.1
    wagtailmain: git+https://github.com/wagtail/wagtail.git

    postgres: psycopg2>=2.9

install_command = python -Im pip install --upgrade {opts} {packages}
commands =
    python -Im coverage run testmanage.py test --deprecation all {posargs: -v 2}

[testenv:coverage-report]
base_python = python3.11
package = skip
deps =
    coverage>=7.0,<8.0
commands =
    python -Im coverage report -m

[testenv:wagtailmain]
description = Test with latest Wagtail main branch
base_python = python3.12
deps =
    wagtailmain: git+https://github.com/wagtail/wagtail.git@main#egg=Wagtail

commands =
    python -Im testmanage.py test --deprecation all {posargs: -v 2}


[testenv:interactive]
description = An interactive environment for local testing purposes
basepython = python3.11
deps =
    wagtail>=5.2,<6.0

commands_pre =
    python {toxinidir}/testmanage.py makemigrations
    python {toxinidir}/testmanage.py migrate
    python {toxinidir}/testmanage.py shell -c "from django.contrib.auth.models import User;(not User.objects.filter(username='admin').exists()) and User.objects.create_superuser('admin', 'super@example.com', 'changeme')"
    python {toxinidir}/testmanage.py createcachetable

commands =
    {posargs:python testmanage.py runserver 0.0.0.0:8020}

setenv =
    INTERACTIVE = 1

[testenv:migrations]
basepython = python3.11

# always generate with the min supported versions
deps =
    Django>=3.2,<3.3
    wagtail>=5.2,<6.0

commands =
    python {toxinidir}/testmanage.py makemigrations
